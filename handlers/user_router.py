import database as db
import utils.async_utils as au
import keyboards.inline as ikb
from config import ADMIN
from logger import logger
from asyncio import sleep
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup

# router for processing messages from users
user_router = Router()


# command /start handler
@user_router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name

    logger.info("command start",
                extra={"user_id": user_id}
                )

    # checking if a user are in the database
    if await db.user_exists(user_id):

        # checking if a city is selected by the user
        if await db.city_selected(user_id):
            await message.answer(
                text=f"""üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Å–Ω–æ–≤–∞, {user_name}!

–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /about"""
            )
        else:
            await message.answer(
                text=f"""üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Å–Ω–æ–≤–∞, {user_name}!

–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /about"""
            )

            # offering the user to select a city
            await set_city_command(message)
    else:
        # adding a new user to the database
        await db.add_user(user_id)

        await message.answer(
            text=f"""üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user_name}!

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ - –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (4 —Ü–∏—Ñ—Ä—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –Ω–∞ —Ç–∞–±–ª–æ, –∏–ª–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö)

–ë–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /about"""
        )

        # offering user to select city
        await set_city_command(message)


# command /menu handler
@user_router.message(Command("menu"))
async def menu_command(message: Message):
    logger.info("command menu",
                extra={"user_id": message.from_user.id}
                )

    sent_msg = await message.answer(text="–ê–≤—Ç–æ–±—É—Å—ã –ì—Ä—É–∑–∏–∏ üá¨üá™", reply_markup=None)
    await sent_msg.edit_reply_markup(
        reply_markup=ikb.main_menu(sent_msg.chat.id, sent_msg.message_id)
    )


# command /set_city
@user_router.message(Command("set_city"))
async def set_city_command(message: Message):
    logger.info("button set_city",
                extra={"user_id": message.from_user.id}
                )

    # offering user to select a city
    await message.answer(text="üèò –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:", reply_markup=ikb.set_city())


# selecting a city
@user_router.callback_query(F.data.in_({"Tbilisi", "Batumi"}))
async def select_city_button(callback: CallbackQuery):
    logger.info("button select_city",
                extra={"user_id": callback.from_user.id, "city_name": callback.data}
                )

    await callback.answer(text=f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ {callback.data}")

    user_id = callback.from_user.id
    city_name = callback.data

    # changing the user's selected city in the database
    await db.set_city(user_id, city_name)


# command /about
@user_router.message(Command("about"))
async def about_command(message: Message):
    logger.info("command about",
                extra={"user_id": message.from_user.id}
                )

    await message.answer(
        text="""–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ - –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

–ù–æ–º–µ—Ä –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö –∏–ª–∏, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –Ω–∞ —Ç–∞–±–ª–æ —É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ - –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –Ω–∞–ø–∏—Å–∞–Ω–æ <b>ID:XXXX</b>, –≥–¥–µ XXXX - –Ω–æ–º–µ—Ä —Ç–≤–æ–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏ –ø–æ–ª—É—á–∏—à—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:
<code>17:55</code> üî¥ <code>408</code> —á–µ—Ä–µ–∑ <b>3</b> –º–∏–Ω. Rustaveli M/S
<code>17:58</code> üü° <code>331</code> —á–µ—Ä–µ–∑ <b>6</b> –º–∏–Ω. Krtsanisi Street - Station Square
<code>18:04</code> üü¢ <code>333</code> —á–µ—Ä–µ–∑ <b>12</b> –º–∏–Ω. Vazisubani M/D-2 - Tbilisi Mall

–ö—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä - –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –∞–≤—Ç–æ–±—É—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω—É—Ç—ã –∏–ª–∏ –º–µ–Ω—å—à–µ
–ñ—ë–ª—Ç—ã–π - 4-6 –º–∏–Ω—É—Ç
–ó–µ–ª—ë–Ω—ã–π - 7 –∏ –±–æ–ª—å—à–µ

–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É - –≤–≤–µ–¥–∏ –µ—ë –Ω–æ–º–µ—Ä –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
<b>2171 –ö –º–µ—Ç—Ä–æ</b>

–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ - –≤–≤–µ–¥–∏ –µ—ë –Ω–æ–º–µ—Ä –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.

–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /menu

–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å/–∑–∞–º–µ—á–∞–Ω–∏–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Ç–æ –∑–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin"""
    )


class ContactWithAdmin(StatesGroup):
    making_request = State()


# command /admin handler
@user_router.message(Command("admin"))
async def admin_command(message: Message, state: FSMContext):
    logger.info("command admin",
                extra={"user_id": message.from_user.id}
                )

    # check the number of requests for the last 24 hours (limit - 5 requests)
    amount_requests = await db.count_requests(message.from_user.id)

    if amount_requests >= 5:
        await message.answer(
            text="""–£ —Ç–µ–±—è –±—ã–ª–æ –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∞–¥–º–∏–Ω –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.

–î–∞–≤–∞–π –ø–æ–¥–æ–∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ ‚ù§Ô∏è"""
        )
        await menu_command(message)
    else:
        await message.answer(
            text="""–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å/–∑–∞–º–µ—á–∞–Ω–∏–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –≤–≤–µ–¥–∏ –µ–≥–æ –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω –ø—Ä–∏—à–ª—ë—Ç –æ—Ç–≤–µ—Ç.

–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∂–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è""",
            reply_markup=ikb.cancel_request(),
        )
        await state.set_state(ContactWithAdmin.making_request)


# cancel request from user
@user_router.callback_query(F.data == "cancel_request")
async def cancel_request_button(callback: CallbackQuery, state: FSMContext):
    logger.info("button cancel_request",
                extra={"user_id": callback.from_user.id}
                )

    if await state.get_state() != ContactWithAdmin.making_request:
        await callback.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    else:
        await state.clear()
        await callback.answer(text="–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω.")
        await menu_command(callback.message)


# receiving a request from a user
@user_router.message(ContactWithAdmin.making_request)
async def making_request_state(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logger.info("text",
                extra={"user_id": message.from_user.id, "text": message.text}
                )
    # saving user text
    request = message.text.strip()

    # adding a request to the database
    request_id = await db.add_request(user_id, request)

    # sending request to admin
    await message.bot.send_message(
        chat_id=ADMIN,
        text=f"üÜï –ù–û–í–´–ô –ó–ê–ü–†–û–° üÜï\n\nUSER_ID: <code>{user_id}</code>\nREQUEST_ID: <code>{request_id}</code>\n\n{request}\n\n/answer [user_id] [request_id] [answer]"
    )

    # reply to user and end State
    await message.reply(text="–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω. ‚ù§Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π.")
    await state.clear()
    await menu_command(message)


# any user's message
@user_router.message(F.text)
async def user_text(message: Message):
    user_id = message.from_user.id

    logger.info("text",
                extra={"user_id": message.from_user.id, "text": message.text}
                )

    # check if the city is selected by the user
    if await db.city_selected(user_id):
        text = message.text.strip()
        stop_name = None

        if " " in text:
            text, stop_name = text.split(" ", 1)

        # user's message validation
        try:
            stop_id = int(text)
        except ValueError:
            await message.answer(text=f"<i>{text}</i> - —ç—Ç–æ —Ç–æ—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏?")
            return

        # getting user's city
        city_name = await db.get_user_city_name(user_id)

        if not await db.stop_exists(city_name, stop_id):
            await message.reply(text=f"üò¢ –í {city_name} —Ç–∞–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ—Ç.")
            return

        # if the user wants to save the stop
        if stop_name:

            # limit of saved stops: 10
            if await db.get_user_stops_count(user_id) >= 10:
                sent_message = await message.reply(text="""‚ùé –£ —Ç–µ–±—è —É–∂–µ –¥–æ–≤–æ–ª—å–Ω–æ –º–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫.
–ú–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–∞–∫—É—é-–Ω–∏–±—É–¥—å —Å—Ç–∞—Ä—É—é?""")
            else:
                # check if there is a stop with the alias in the database
                city_id = await db.get_city_id(city_name)
                row = await db.get_stop_alias(user_id, city_id, stop_id)

                if row:
                    await message.reply(text="‚ùé –¢–∞–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
                    return

                await db.add_user_stop(user_id, city_name, stop_id, stop_name)
                sent_message = await message.reply(text=f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
            await sleep(6)

            # attempt to delete user and bot messages
            try:
                await message.bot.delete_message(
                    chat_id=sent_message.chat.id,
                    message_id=sent_message.message_id
                )
            except Exception as e:
                print(e)
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=message.message_id
                )
            except Exception as e:
                print(e)
            return

        # sending action as if the bot is typing
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        # getting schedule
        answer = await au.return_schedule(stop_id, city_name, user_id)

        # sending a message to a user
        sent_msg = await message.answer(text=answer, reply_markup=None)
        await sent_msg.edit_reply_markup(
            reply_markup=ikb.refresh_schedule(
                city_name=city_name,
                stop_id=stop_id,
                chat_id=sent_msg.chat.id,
                message_id=sent_msg.message_id
            )
        )
    else:
        # offering user to select city
        await message.answer(
            text="–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≥–æ—Ä–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤.",
            reply_markup=ikb.set_city(),
        )


# "refresh" button
@user_router.callback_query(F.data.startswith("refresh:"))
async def refresh_button(callback: CallbackQuery):
    user_id = callback.from_user.id
    logger.info("button refresh",
                extra={"user_id": user_id}
                )

    # getting callback data
    callback_data = callback.data.split(":")
    city_name = callback_data[1]

    # writing callback data to variables
    stop_id, chat_id, message_id = map(int, callback_data[2:])

    # sending action as if the bot is typing
    await callback.message.bot.send_chat_action(chat_id=chat_id, action="typing")

    # getting schedule
    answer = await au.return_schedule(stop_id, city_name, user_id)

    # if possible to change
    try:
        await callback.bot.edit_message_text(
            text=answer,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=ikb.refresh_schedule(city_name, stop_id, chat_id, message_id)
        )
        await callback.answer(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {city_name} {stop_id}")
    except Exception as e:
        if "message is not modified" in str(e).lower():
            await callback.answer(text=f"–ü–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç: {city_name} {stop_id}")
            return
        print(e)

        # sending a message to a user
        sent_msg = await callback.message.answer(text=answer, reply_markup=None)
        await sent_msg.edit_reply_markup(
            reply_markup=ikb.refresh_schedule(
                city_name=city_name,
                stop_id=stop_id,
                chat_id=sent_msg.chat.id,
                message_id=sent_msg.message_id
            )
        )


# 'menu' button
@user_router.callback_query(F.data.startswith("menu:"))
async def menu_button(callback: CallbackQuery):
    logger.info("button menu",
                extra={"user_id": callback.from_user.id}
                )

    # getting callback data
    callback_data = callback.data.split(":")

    # writing callback data to variables
    chat_id, message_id = map(int, callback_data[1:])

    # if possible to change bot message
    try:
        await callback.bot.edit_message_text(
            text="–ê–≤—Ç–æ–±—É—Å—ã –ì—Ä—É–∑–∏–∏ üá¨üá™",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=ikb.main_menu(chat_id, message_id)
        )
    except Exception as e:
        print(e)

        # sending a new message to a user
        sent_msg = await callback.message.answer(text="–ê–≤—Ç–æ–±—É—Å—ã –ì—Ä—É–∑–∏–∏ üá¨üá™", reply_markup=None)
        await sent_msg.edit_reply_markup(
            reply_markup=ikb.main_menu(
                chat_id=sent_msg.chat.id,
                message_id=sent_msg.message_id)
        )


# inline-keyboard with saved user routes
@user_router.callback_query(F.data.startswith("saved_routes:"))
async def saved_routes_button(callback: CallbackQuery):
    logger.info("button saved_routes",
                extra={"user_id": callback.from_user.id}
                )

    await callback.answer(text="*–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*")


# inline-keyboard with saved user stops
@user_router.callback_query(F.data.startswith("saved_stops:"))
async def saved_stops_button(callback: CallbackQuery):
    logger.info("button saved_stops",
                extra={"user_id": callback.from_user.id}
                )

    # getting callback data
    callback_data = callback.data.split(":")

    # writing callback data to variables
    chat_id, message_id = map(int, callback_data[1:])

    # getting user's saved stops
    saved_stops = await db.get_users_stops(callback.from_user.id)

    if saved_stops:
        await callback.answer()

        # if possible to change bot message
        try:
            await callback.bot.edit_message_text(
                text="üöè –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=ikb.saved_stops(saved_stops, chat_id, message_id)
            )
        except Exception as e:
            print(e)

            # sending a new message
            sent_msg = await callback.message.answer(text="üöè –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", reply_markup=None)
            await sent_msg.edit_reply_markup(
                reply_markup=ikb.saved_stops(
                    user_stops=saved_stops,
                    chat_id=sent_msg.chat.id,
                    message_id=sent_msg.message_id)
            )
    else:
        await callback.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫")


# saved user stop
@user_router.callback_query(F.data.startswith("user_stop:"))
async def user_stop_button(callback: CallbackQuery):
    # getting callback data
    callback_data = callback.data.split(":")

    # writing callback data to variables
    chat_id, message_id, city_id, stop_id = map(int, callback_data[1:])
    user_id = callback.from_user.id

    logger.info("button user_stop",
                extra={"user_id": user_id}
                )

    # getting bus stop alias
    stop_alias = await db.get_stop_alias(user_id, city_id, stop_id)

    if not stop_alias:
        await callback.answer("–û—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ—Ç.")
        return

    # getting city_name
    city_name = await db.get_city_name(city_id)

    # sending action as if the bot is typing
    await callback.message.bot.send_chat_action(chat_id=chat_id, action="typing")

    # getting schedule
    answer = f"<b>{stop_alias}:</b>\n"
    answer += await au.return_schedule(stop_id, city_name, user_id)
    await callback.answer(text=f"{city_name} {stop_id}")

    # if possible to change bot message
    try:
        await callback.bot.edit_message_text(
            text=answer,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=ikb.delete_stop(city_id, stop_id, chat_id, message_id)
        )
    except Exception as e:
        print(e)

        # sending a new message
        sent_msg = await callback.message.answer(text=answer, reply_markup=None)
        await sent_msg.edit_reply_markup(
            reply_markup=ikb.delete_stop(city_id, stop_id, chat_id, message_id)
        )


# schedule with buttons for manipulation
@user_router.callback_query(F.data.startswith("refresh_del:"))
async def refresh_delete_stop_button(callback: CallbackQuery):
    # getting callback data
    callback_data = callback.data.split(":")
    city_id = int(callback_data[1])
    city_name = await db.get_city_name(city_id)

    # writing callback data to variables
    stop_id, chat_id, message_id = map(int, callback_data[2:])
    user_id = callback.from_user.id
    logger.info("button refresh_delete_stop",
                extra={"user_id": user_id}
                )

    # getting bus stop alias
    stop_alias = await db.get_stop_alias(user_id, city_id, stop_id)

    # sending action as if the bot is typing
    await callback.message.bot.send_chat_action(chat_id=chat_id, action="typing")

    # getting schedule
    answer = f"<b>{stop_alias}:</b>\n"
    answer += await au.return_schedule(stop_id, city_name, user_id)

    city_id = await db.get_city_id(city_name)

    # if possible to change bot message
    try:
        await callback.bot.edit_message_text(
            text=answer,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=ikb.delete_stop(city_id, stop_id, chat_id, message_id)
        )
        await callback.answer(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {city_name} {stop_id}")
    except Exception as e:
        if "message is not modified" in str(e).lower():
            await callback.answer(text=f"–ü–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç: {city_name} {stop_id}")
            return
        print(e)

        # sending a new message to a user
        sent_msg = await callback.message.answer(text=answer, reply_markup=None)
        await sent_msg.edit_reply_markup(
            reply_markup=ikb.delete_stop(city_id, stop_id, chat_id, message_id)
        )


# delete saved user stop
@user_router.callback_query(F.data.startswith("del:"))
async def delete_stop_button(callback: CallbackQuery):
    logger.info("button delete_stop",
                extra={"user_id": callback.from_user.id}
                )

    # getting callback data
    callback_data = callback.data.split(":")
    city_id, stop_id = map(int, callback_data[1:])

    await db.delete_user_stop(callback.from_user.id, city_id, stop_id)

    await callback.answer(text=f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {stop_id} —É–¥–∞–ª–µ–Ω–∞")


# if there are no saved stops - return to the menu
@user_router.callback_query(F.data.startswith("if_saved_stops:"))
async def if_saved_stops_button(callback: CallbackQuery):
    logger.info("button if_saved_stops",
                extra={"user_id": callback.from_user.id}
                )

    # getting callback data
    callback_data = callback.data.split(":")

    # writing callback data to variables
    chat_id, message_id = map(int, callback_data[1:])

    saved_stops = await db.get_users_stops(callback.from_user.id)

    if saved_stops:
        await callback.answer()

        # if possible to change bot message
        try:
            await callback.bot.edit_message_text(
                text="üöè –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=ikb.saved_stops(saved_stops, chat_id, message_id)
            )
        except Exception as e:
            print(e)

            # sending a new message
            sent_msg = await callback.message.answer(text="üöè –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏", reply_markup=None)
            await sent_msg.edit_reply_markup(
                reply_markup=ikb.saved_stops(saved_stops, sent_msg.chat.id, sent_msg.message_id)
            )
    else:
        await callback.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–æ–∫")
        await menu_button(callback)