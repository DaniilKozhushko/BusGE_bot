import database as db
import utils.utils as u
from aiogram import Router, F
import utils.async_utils as au
import keyboards.inline as ikb
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery


# router for processing messages from users
user_router = Router()


# command /start handler
@user_router.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    # checking if a user are in the database
    if await db.user_exists(user_id):

        # checking if a city is selected by the user
        if await db.city_selected(user_id):
            await message.answer(
                text=f"""üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Å–Ω–æ–≤–∞, {message.from_user.first_name}!

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ - –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (4 —Ü–∏—Ñ—Ä—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –Ω–∞ —Ç–∞–±–ª–æ, –∏–ª–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö)"""
            )
        else:
            await message.answer(
                text=f"""üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è —Å–Ω–æ–≤–∞, {message.from_user.first_name}!

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ - –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (4 —Ü–∏—Ñ—Ä—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –Ω–∞ —Ç–∞–±–ª–æ, –∏–ª–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö)"""
            )

            # offering the user to select a city
            await set_city_command(message)
    else:
        # adding a new user to the database
        await db.add_user(user_id)
        await message.answer(
            text=f"""üëãüèª –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.first_name}!

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ - –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (4 —Ü–∏—Ñ—Ä—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –Ω–∞ —Ç–∞–±–ª–æ, –∏–ª–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö)"""
        )

        # offering user to select city
        await set_city_command(message)


# command /set_city
@user_router.message(Command("set_city"))
async def set_city_command(message: Message):
    # offering user to select city
    await message.answer(text="üèò –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:", reply_markup=ikb.set_city())


# selecting a city
@user_router.callback_query(F.data.in_({"Tbilisi", "Batumi"}))
async def select_tbilisi(callback: CallbackQuery):
    await callback.answer(text=f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ {callback.data}")
    user_id = callback.from_user.id
    city_name = callback.data

    # changing the user's selected city in the database
    await db.set_city(user_id, city_name)


# command /about
@user_router.message(Command("about"))
async def about_command(message: Message):
    await message.answer(
        text="""–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤ - –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
    
–ù–æ–º–µ—Ä –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö –∏–ª–∏, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –Ω–∞ —Ç–∞–±–ª–æ —É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ - –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –Ω–∞–ø–∏—Å–∞–Ω–æ <b>ID:XXXX</b>, –≥–¥–µ XXXX - –Ω–æ–º–µ—Ä —Ç–≤–æ–µ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏ –ø–æ–ª—É—á–∏—à—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä:
<code>17:55</code> üî¥ <code>408</code> —á–µ—Ä–µ–∑ <b>3</b> –º–∏–Ω. Rustaveli M/S
<code>17:58</code> üü° <code>331</code> —á–µ—Ä–µ–∑ <b>6</b> –º–∏–Ω. Krtsanisi Street - Station Square
<code>18:04</code> üü¢ <code>333</code> —á–µ—Ä–µ–∑ <b>12</b> –º–∏–Ω. Vazisubani M/D-2 - Tbilisi Mall

–ö—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä - –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è –∞–≤—Ç–æ–±—É—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å 3 –º–∏–Ω—É—Ç—ã –∏–ª–∏ –º–µ–Ω—å—à–µ
–ñ—ë–ª—Ç—ã–π - 4-6 –º–∏–Ω—É—Ç
–ó–µ–ª—ë–Ω—ã–π - 7 –∏ –±–æ–ª—å—à–µ"""
    )


# any user's message
@user_router.message(F.text)
async def user_text(message: Message):
    user_id = message.from_user.id

    # check if the city is selected by the user
    if await db.city_selected(user_id):

        # user's message validation
        text = message.text.strip()
        try:
            bus_stop_number = int(text)
        except ValueError:
            await message.answer(text=f"<i>{text}</i> - —ç—Ç–æ —Ç–æ—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏?")
            return

        # getting user's city
        city = await db.get_city_name(user_id)

        # sending action as if the bot is typing
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")

        # getting schedule
        answer = await au.return_schedule(bus_stop_number, city)

        # sending a message to a user
        sent_msg  = await message.answer(text=answer, reply_markup=None)
        await sent_msg.edit_reply_markup(
            reply_markup=ikb.refresh_schedule(city, bus_stop_number, sent_msg.chat.id, sent_msg.message_id)
        )
    else:
        # offering user to select city
        await message.answer(
            text="–í—ã–±–µ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≥–æ—Ä–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å–æ–≤.",
            reply_markup=ikb.set_city(),
        )


# "refresh" button
@user_router.callback_query(F.data.startswith("refr:"))
async def refresh_schedule(callback: CallbackQuery):
    # getting callback data
    callback_data = callback.data.split(":")
    city = callback_data[1]

    # writing callback data to variables
    bus_stop_number, chat_id, message_id = map(int, callback_data[2:])

    # getting schedule
    answer = await au.return_schedule(bus_stop_number, city)

    # if possible to change
    try:
        await callback.bot.edit_message_text(
            text=answer,
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=ikb.refresh_schedule(city, bus_stop_number, chat_id, message_id)
        )
        await callback.answer(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {bus_stop_number}")
    except Exception as e:
        if "message is not modified" in str(e).lower():
            if "üò¢" not in answer:
                await callback.answer(text=f"–ü–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ—Ç: {bus_stop_number}")
            else:
                await callback.answer()
            return

        # sending a message to a user
        sent_msg = await callback.message.answer(text=answer, reply_markup=None)
        await sent_msg.edit_reply_markup(
            reply_markup=ikb.refresh_schedule(city, bus_stop_number, sent_msg.chat.id, sent_msg.message_id)
        )